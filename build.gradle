buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE")
        classpath("io.spring.gradle:propdeps-plugin:0.0.8")
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'io.codearte.nexus-staging' version '0.9.0'
    id 'com.palantir.docker' version '0.13.0'
}

ext {
    name = 'Fedora Commons Repository'
    description = 'Fedora Commons Repository'
    url = 'https://github.com/fcrepo4/fcrepo4'
    inceptionYear = '1997'
    homepage = 'http://fedorarepository.org/'
    vendor = 'pandorasystems'
}

configure(allprojects) { project ->
    apply plugin: "java"
    apply plugin: 'maven'
    apply plugin: "propdeps"
    apply plugin: "io.spring.dependency-management"

    group = 'org.fcrepo'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases'
        }
        flatDir {
            dirs "$rootProject.projectDir/lib"
        }
    }

    ext.activemqVersion = "5.15.0"
    ext.awaitilityVersion = "1.7.0"
    ext.awsClientVersion = "1.11.188"
    ext.blueprintVersion = "1.1.1"
    ext.commonscodecVersion = "1.10"
    ext.commonsIoVersion = "2.5"
    ext.commonslangVersion = "3.5"
    ext.dockerComposeRuleJunitVersion = "0.32.0"
    ext.fcrepoBomVersion = "4.7.4"
    ext.grizzlyVersion = "2.3.28"
    ext.guavaVersion = "20.0"
    ext.hk2Version = "2.5.0-b45"
    ext.htmlunitVersion = "2.15"
    ext.httpclientVersion = "4.5.3"
    ext.httpmimeVersion = "4.4.1"
    ext.httpcoreVersion = "4.4.1"
    ext.jacksonVersion = "2.9.0"
    ext.javaxServletapiVersion = "3.1.0"
    ext.javaeeApiVersion = "7.0"
    ext.jbossjtaVersion = "4.16.6.Final"
    ext.jbossloggingVersion = "3.3.0.Final"
    ext.jcrVersion = "2.0"
    ext.jettyVersion = "9.3.1.v20150714"
    ext.jenaVersion = "3.1.1"
    ext.jerseyVersion = "2.25.1"
    ext.jgroupsVersion = "3.6.13.Final"
    ext.jodatimeVersion = "2.9.9"
    ext.jsonldVersion = "0.8.3"
    ext.junitVersion = "4.12"
    ext.logbackVersion = "1.1.7"
    ext.marmottaVersion = "3.3.0"
    ext.metricsVersion = "3.2.4"
    ext.mockitoVersion = "1.10.19"
    ext.modeshapeVersion = "5.4.1.Final"
    ext.mysqlVersion = "5.1.38"
    ext.nettyVersion = "4.1.15.Final"
    ext.postgresqlVersion = "9.4.1211"
    ext.slf4jVersion = "1.7.21"
    ext.snappyjavaVersion = "1.1.2.6"
    ext.springVersion = "4.3.3.RELEASE_1"
    ext.tikaVersion = "1.16"
    ext.thriftVersion = "0.9.3"
    ext.velocityVersion = "1.7_3"
    ext.velocityToolsVersion = "2.0_1"
    ext.xmlapisVersion = "1.4.01"
    ext.warpluginVersion = "2.6"
    ext.xbeanVersion = "4.6-SNAPSHOT"

    ext.projectOsgiVersion = version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
    ext.defaultOsgiImports = "org.osgi.service.blueprint;version='[1,2)',*"
    ext.osgiVersion = '6.0.0'
    ext.paxExamVersion = '4.9.1'
    ext.karafVersion = '4.0.5'
    ext.fcrepoVersion = '4.7.1'
    ext.fusekiVersion = '2.3.1'
    ext.xercesVersion = '2.11.0'

    ext.fcrepoCamelVersion = "4.5.0"
    ext.fcrepoCamelToolboxVersion = "4.7.1"
    ext.camelVersion = '2.19.2'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    processResources {

        filesNotMatching(["**/*.vsl", "**/logback.xml", "**/entrypoint.sh", "**/*.cfg", "**/*.jar"]) {
            expand(project.properties)
        }
    }

    processTestResources {
        filesNotMatching(["**/logback-test.xml", "**/logback.xml", "**/*.png"]) {
            expand(project.properties)
        }
    }

    test {
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))
        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        exclude(["**/Abstract*.class", '**/*$*'])
        reports.junitXml.destination(file("$buildDir/test-results"))
    }

    def dockerResourceDir = "${rootProject.buildDir}/resources/main/docker"
    def mavenInstallPath = "repository/org/fcrepo"

    docker {
        name "${vendor}/fcrepo"
        tags "${version}"
        dockerfile file("${dockerResourceDir}/Dockerfile")
        files "${dockerResourceDir}/cfg", "${dockerResourceDir}/lib"
        copySpec.from("${buildDir}/maven").into("${mavenInstallPath}")
        pull true
        noCache true
    }

    def homeDir = System.getProperty('user.home')
    def mavenLocal = new File(homeDir, ".m2/${mavenInstallPath}")

    task copyTask(type: Copy) {
        from mavenLocal
        into "${rootProject.buildDir}/maven"
    }
    copyTask.dependsOn install

    def licenseFile = "${rootDir}/src/main/resources/LICENSE"

    license {
        include "**/*.java"
        exclude "**/*.xml"
        header file(licenseFile)
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    afterEvaluate {
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.compilerArgs.add("-Xlint:unchecked")
                options.compilerArgs.add("-Xlint:deprecation")
//                options.compilerArgs.addAll(["--add-modules", "java.se.ee"])
            }
        }

        compileTestJava {
            doFirst {
//                options.compilerArgs.addAll(['--add-modules', 'java.se.ee'])
                options.compilerArgs.add("-Xlint:deprecation")
            }
        }
    }
}

configure(subprojects) { subproject ->
    apply plugin: "maven-publish"
    apply plugin: "com.bmuschko.nexus"
    apply plugin: "signing"
    apply plugin: "jacoco"

    task packageTests(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts.archives packageTests

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }

    configurations.all {
        it.exclude group: 'commons-logging'
        it.exclude group: 'log4j', module: 'log4j'
        it.exclude group: 'org.slf4j', module: 'slf4j-jcl'
        it.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
        it.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        it.exclude group: 'org.slf4j', module: 'slf4j-log4j13'
        it.exclude group: 'org.slf4j', module: 'slf4j-nop'
        it.exclude group: 'org.slf4j', module: 'slf4j-simple'
        it.exclude group: 'org.apache.cxf'
    }

    def exportedProjects = [
            ":fcrepo-auth-common",
            ":fcrepo-event-serialization",
            ":fcrepo-http-api",
            ":fcrepo-http-commons",
            ":fcrepo-jms",
            ":fcrepo-kernel-api",
            ":fcrepo-kernel-modeshape",
            ":fcrepo-metrics"
    ]

    def docOutputDir = "${rootProject.buildDir}/docs/javadoc"

    task allJavadoc(type: Javadoc) {
        //noinspection GroovyAssignabilityCheck
        source exportedProjects.collect { project(it).sourceSets.main.allJava }
        classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
        destinationDir = file(docOutputDir)
    }

    jacoco {
        toolVersion = "0.7.9"
    }

    modifyPom {
        //noinspection GroovyAssignabilityCheck
        project {
            organization {
                name vendor
                url homepage
            }

            developers {
                developer {
                    id 'christopher-johnson'
                    name 'Christopher Johnson'
                    email 'chjohnson @ (domain of organization url)'
                    organization 'Pan-dora Ecosystem'
                    organizationUrl 'https://pan-dora.github.io/'
                    roles {
                        role 'developer'
                    }
                    timezone '+1'
                }
            }

            scm {
                connection 'scm:git:git://github.com/fcrepo4/fcrepo4.git'
                developerConnection 'scm:git:git@ggithub.com/fcrepo4/fcrepo4.git'
                url 'https://github.com/fcrepo4/fcrepo4/'
                tag 'HEAD'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                }
            }
        }
    }
}

project("fcrepo-auth-common") {
    apply plugin: "osgi"
    description = 'Fedora Repository Authorization Commons Module'
    dependencies {
        compile project(":fcrepo-kernel-api")
        compile project(":fcrepo-http-commons")
        compileOnly("javax:javaee-api:${javaeeApiVersion}")
        compile("org.apache.httpcomponents:httpclient-osgi:${httpclientVersion}") {
            exclude(module: 'commons-logging')
        }
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}")
        compile("org.glassfish.jersey.media:jersey-media-multipart:${jerseyVersion}")
        compile("org.modeshape:modeshape-web-jcr:${modeshapeVersion}")
        compile("org.modeshape:modeshape-jcr:${modeshapeVersion}") {
            exclude(module: 'netcdf')
            exclude(module: 'commons-httpclient')
            exclude(module: 'metadata-extractor')
            exclude(module: 'rome')
            exclude(module: 'boilerpipe')
            exclude(module: 'bcmail-jdk15')
            exclude(module: 'bcprov-jdk15')
        }
        testCompile project(":fcrepo-configs")
        testCompile project(":fcrepo-http-commons")
        testCompile project(":fcrepo-kernel-modeshape")
        testCompile project(":fcrepo-http-commons").sourceSets.test.output
        testCompile "com.palantir.docker" +
                ".compose:docker-compose-rule-junit4:${dockerComposeRuleJunitVersion}"
        testCompile("javax.annotation:javax.annotation-api:1.2")
        testCompile("javax.servlet:javax.servlet-api:${javaxServletapiVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-test:${springVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}")
        testCompile("org.glassfish.grizzly:grizzly-http-server:${grizzlyVersion}")
        testCompile("org.glassfish.grizzly:grizzly-http-servlet:${grizzlyVersion}")
        testCompile("org.glassfish.jersey.test-framework" +
                ".providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}")
        testCompile("org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}")
        testCompile("org.glassfish.jersey.core:jersey-common:${jerseyVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
    }

    jar {
        manifest {
            instruction 'Import-Package', "${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.auth.common;version=${projectOsgiVersion}"
        }
    }
}

project("fcrepo-event-serialization") {
    apply plugin: "osgi"

    description = 'Fedora Event Serialization'
    dependencies {
        compile project(":fcrepo-kernel-api")
        compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
        compile("com.google.guava:guava:${guavaVersion}")
        compile("org.apache.jena:jena-arq:${jenaVersion}") {
            exclude(module: 'log4j')
            exclude(module: 'slf4j-log4j12')
        }
        compile("org.apache.jena:jena-core:${jenaVersion}") {
            exclude(module: 'log4j')
            exclude(module: 'slf4j-log4j12')
        }
        testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
        testCompile("com.github.jsonld-java:jsonld-java:${jsonldVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
    }

    jar {
        manifest {
            instruction 'Import-Package', "${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.event.serialization;version=${projectOsgiVersion}"
        }
    }
}

project("fcrepo-http-api") {
    apply plugin: "osgi"

    description = 'Fedora Repository HTTP API Module'
    dependencies {
        compile project(":fcrepo-http-commons")
        compile project(":fcrepo-kernel-modeshape")
        compileOnly("javax.servlet:javax.servlet-api:${javaxServletapiVersion}")
        compileOnly("javax:javaee-api:${javaeeApiVersion}")
        compileOnly("org.modeshape:modeshape-jcr:${modeshapeVersion}") {
            exclude(module: 'commons-codec')
            exclude(module: 'snappy-java')
            exclude(module: 'servlet-api')
            exclude(module: 'xercesImpl')
        }
        compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        compile("io.dropwizard.metrics:metrics-annotation:${metricsVersion}")
        compile("org.apache.httpcomponents:httpclient-osgi:${httpclientVersion}") {
            exclude(module: 'commons-logging')
        }
        compile("org.apache.httpcomponents:httpclient-cache:${httpclientVersion}") {
            exclude(module: 'commons-logging')
        }
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-beans:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.velocity:${velocityVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.velocity-tools:${velocityToolsVersion}") {
            exclude(module: 'commons-logging')
            exclude(module: 'dom4j')
            exclude(module: 'commons-collections')
            exclude(module: 'commons-digester')
            exclude(module: 'commons-beanutils')
            exclude(module: 'struts-core')
            exclude(module: 'struts-taglib')
            exclude(module: 'struts-tiles')
            exclude(module: 'servlet-api')
        }
        compile("org.glassfish.jersey.core:jersey-common:${jerseyVersion}")
        compile("org.glassfish.jersey.media:jersey-media-multipart:${jerseyVersion}")
        compile("org.glassfish.jersey.core:jersey-server:${jerseyVersion}")
        testCompile project(":fcrepo-kernel-modeshape")
        testCompile project(":fcrepo-configs")
        testCompile project(":fcrepo-http-commons").sourceSets.test.output
        testCompile project(":fcrepo-auth-common")
        testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("nu.validator.htmlparser:htmlparser:1.4")
        testCompile("org.glassfish.grizzly:grizzly-http-server:${grizzlyVersion}")
        testCompile("org.glassfish.grizzly:grizzly-http-servlet:${grizzlyVersion}")
        testCompile("org.glassfish.jersey.test-framework" +
                ".providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}")
        testCompile("org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-test:${springVersion}")
        testCompile("org.apache.httpcomponents:httpmime:${httpmimeVersion}") {
            exclude(module: 'commons-logging')
        }
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
    }

    configurations {
        velocity
    }

    dependencies {
        velocity "org.apache.servicemix.bundles:org.apache.servicemix.bundles.velocity:${velocityVersion}"
        velocity "org.apache.servicemix.bundles:org.apache.servicemix.bundles.velocity-tools:${velocityToolsVersion}"
    }

    jar {
        into("lib") {
            from configurations.velocity
        }
        manifest {
            instruction 'Import-Package', "!org.apache.velocity*," +
                    "${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.http.api;version=${projectOsgiVersion}"
            instruction 'Bundle-ClassPath', "., lib/org.apache.servicemix.bundles.velocity-1.7_3.jar," +
                    "lib/org.apache.servicemix.bundles.velocity-tools-2.0_1.jar," +
                    "lib/commons-collections-3.2.1.jar," +
                    "lib/commons-lang-2.4.jar,views/"
        }
    }
}

project("fcrepo-http-commons") {
    apply plugin: "osgi"

    description = 'Fedora Repository HTTP Commons Module'
    dependencies {
        compile project(":fcrepo-metrics")
        compile project(":fcrepo-kernel-modeshape")
        compileOnly("javax:javaee-api:${javaeeApiVersion}")
        compileOnly("javax.servlet:javax.servlet-api:${javaxServletapiVersion}")
        compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        compile("commons-digester:commons-digester:1.8") {
            exclude(module: 'commons-logging')
            exclude(module: 'log4j')
            exclude(module: 'commons-beanutils')
        }
        compile("javax.jcr:jcr:${jcrVersion}")
        compile("org.apache.commons:commons-lang3:${commonslangVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}")
        compile("org.glassfish.jersey.core:jersey-common:${jerseyVersion}")
        compile("org.glassfish.jersey.media:jersey-media-multipart:${jerseyVersion}")
        compile("org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}")
        compile("org.glassfish.jersey.core:jersey-server:${jerseyVersion}")
        compile("org.modeshape:modeshape-jcr-api:${modeshapeVersion}")
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        testCompile project(":fcrepo-configs")
        testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
        testCompile("org.glassfish.grizzly:grizzly-http-server:${grizzlyVersion}")
        testCompile("org.glassfish.grizzly:grizzly-http-servlet:${grizzlyVersion}")
        testCompile("org.glassfish.jersey.test-framework" +
                ".providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}")
        testCompile("org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}")
        testCompile("org.apache.httpcomponents:httpcore:${httpcoreVersion}")
        testCompile("javax.annotation:javax.annotation-api:1.2")
        testCompile("javax.jcr:jcr:${jcrVersion}")

        testCompile("org.modeshape:modeshape-jcr:${modeshapeVersion}") {
            exclude(module: 'snappy-java')
        }
    }

    jar {
        manifest {
            instruction 'Import-Package', "${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.http.commons.*;version=${projectOsgiVersion}"
        }
    }
}

project("fcrepo-IT") {
    description = 'Fedora Repository Integration Test Module'

    dependencies {
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.apache.httpcomponents:httpclient-osgi:${httpclientVersion}") {
            exclude(module: 'commons-logging')
        }
        testCompile("org.modeshape:modeshape-common:${modeshapeVersion}")
        testCompile("org.slf4j:slf4j-api:${slf4jVersion}")
    }

}
project("fcrepo-IT:fcrepo-IT-auth") {
    description = 'Fedora Repository Auth Integration Tests Module'

    dependencies {
        testCompile project(":fcrepo-auth-common")
        testCompile project(":fcrepo-configs")
        testCompile project(":fcrepo-http-commons").sourceSets.test.output
        testCompile project(":fcrepo-http-commons")
        testCompile project(":fcrepo-kernel-modeshape")
        testCompile project(":fcrepo-IT").sourceSets.test.output
        testCompile "com.palantir.docker" +
                ".compose:docker-compose-rule-junit4:${dockerComposeRuleJunitVersion}"
        testCompile("javax.annotation:javax.annotation-api:1.2")
        testCompile("javax.servlet:javax.servlet-api:${javaxServletapiVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-test:${springVersion}") {
            exclude(module: 'commons-logging')
        }
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}") {
            exclude(module: 'commons-logging')
        }
        testCompile("org.glassfish.grizzly:grizzly-http-server:${grizzlyVersion}")
        testCompile("org.glassfish.grizzly:grizzly-http-servlet:${grizzlyVersion}")
        testCompile("org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}")
        testCompile("org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}")
        testCompile("org.glassfish.jersey.core:jersey-common:${jerseyVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
    }

}

project("fcrepo-IT:fcrepo-IT-ldp") {
    description = 'Fedora Repository LDP integration tests Module'

    dependencies {
        testCompile project(":fcrepo-http-commons").sourceSets.test.output
        testCompile project(":fcrepo-IT").sourceSets.test.output
        testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
        testCompile("com.jayway.restassured:rest-assured:2.8.0")
        testCompile "com.palantir.docker" +
                ".compose:docker-compose-rule-junit4:${dockerComposeRuleJunitVersion}"
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.apache.jena:jena-arq:${jenaVersion}")
        testCompile("org.apache.marmotta:marmotta-commons:${marmottaVersion}")
        testCompile("org.apache.marmotta:marmotta-ldp:${marmottaVersion}")
        testCompile("org.jboss.resteasy:resteasy-jaxrs:3.0.8.Final")
        testCompile("org.openrdf.sesame:sesame-rio-api:4.1.2")
        testCompile("org.rendersnake:rendersnake:1.9.0")
        testCompile("org.testng:testng:6.8.8")
        testCompile("org.w3:ldp-testsuite:0.2.0-SNAPSHOT")
    }
}

project("fcrepo-IT:fcrepo-IT-rdf") {
    description = 'Fedora Repository RDF integration tests Module'
    dependencies {
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}")
        compile("org.glassfish.jersey.core:jersey-common:${jerseyVersion}")
        testCompile project(":fcrepo-IT").sourceSets.test.output
        testCompile project(":fcrepo-http-api").sourceSets.test.output
        testCompile project(":fcrepo-configs")
        testCompile project(":fcrepo-http-api")
        testCompile project(":fcrepo-http-api").sourceSets.test.output
        testCompile project(":fcrepo-http-commons").sourceSets.test.output
        testCompile project(":fcrepo-auth-common")
        testCompile project(":fcrepo-http-commons")


        testCompile("junit:junit:${junitVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-test:${springVersion}")

        testCompile("org.glassfish.grizzly:grizzly-http-server:${grizzlyVersion}")
        testCompile("org.glassfish.grizzly:grizzly-http-servlet:${grizzlyVersion}")
        testCompile("org.glassfish.jersey.test-framework" +
                ".providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}")
        testCompile("org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
        testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
    }
}

//project("fcrepo-jcr-bom") {
//    dependencies {
//        compile("org.modeshape:modeshape-jcr:${modeshapeVersion}") {
//            exclude(module: 'commons-codec')
//            exclude(module: 'snappy-java')
//            exclude(module: 'servlet-api')
//            exclude(module: 'xercesImpl')
//        }
//        compile "commons-codec:commons-codec:${commonscodecVersion}",
//                "org.modeshape:modeshape-common:${modeshapeVersion}",
//                "org.jboss.jbossts:jbossjta:${jbossjtaVersion}",
//                "org.xerial.snappy:snappy-java:${snappyjavaVersion}"
//    }
//}

project("fcrepo-jms") {
    apply plugin: "osgi"

    description = 'Fedora Repository JMS Module'
    dependencies {
        compile project(":fcrepo-kernel-api")
        compile project(":fcrepo-event-serialization")
        compile("org.glassfish.hk2.external:javax.inject:${hk2Version}")
        compile("org.apache.activemq:activemq-spring:${activemqVersion}") {
            exclude(module: 'commons-logging')
        }
        compile("org.apache.activemq:activemq-kahadb-store:${activemqVersion}") {
            exclude(module: 'commons-logging')
        }
        compile("org.apache.activemq:activemq-stomp:${activemqVersion}") {
            exclude(module: 'commons-logging')
        }
        compile("com.google.guava:guava:${guavaVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}")
        testCompile project(":fcrepo-kernel-modeshape")
        testCompile("org.modeshape:modeshape-jcr:${modeshapeVersion}") {
            exclude(module: 'netcdf')
            exclude(module: 'commons-httpclient')
            exclude(module: 'metadata-extractor')
            exclude(module: 'rome')
            exclude(module: 'boilerpipe')
            exclude(module: 'bcmail-jdk15')
            exclude(module: 'bcprov-jdk15')
        }
        testCompile("javax.servlet:javax.servlet-api:${javaxServletapiVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-test:${springVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aop:${springVersion}")
        testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
        testCompile("com.jayway.awaitility:awaitility:${awaitilityVersion}")
    }

    jar {
        manifest {
            instruction 'Import-Package', "${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.jms;version=${projectOsgiVersion}"
        }
    }
}

project("fcrepo-kernel-api") {
    apply plugin: "osgi"

    description = 'Fedora Repository Kernel API'
    dependencies {
        compile("com.google.guava:guava:${guavaVersion}")
        compile("org.apache.jena:jena-core:${jenaVersion}") {
            exclude(module: 'log4j')
            exclude(module: 'slf4j-log4j12')
        }
        compile("org.apache.jena:jena-arq:${jenaVersion}") {
            exclude(module: 'log4j')
            exclude(module: 'slf4j-log4j12')
        }
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
        testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
    }

    jar {
        manifest {
            instruction 'Import-Package', "${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.kernel.api.*;version=${projectOsgiVersion}"
        }
    }
}

project("fcrepo-kernel-modeshape") {
    apply plugin: "osgi"

    description = 'Fedora Repository Kernel Implementation (ModeShape)'
    dependencies {
        compile project(":fcrepo-kernel-api")
        compile project(":fcrepo-metrics")
        compile("org.modeshape:modeshape-jcr:${modeshapeVersion}")
        compile("org.modeshape:modeshape-jcr-api:${modeshapeVersion}")
        compile("javax.jcr:jcr:${jcrVersion}")
        compile("org.jboss.jbossts:jbossjta:4.16.6.Final")
        compile("org.glassfish.hk2.external:javax.inject:${hk2Version}")
        compile("com.google.guava:guava:${guavaVersion}")
        compile("org.osgi:org.osgi.core:${osgiVersion}")
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:${springVersion}")
        compile("org.apache.jena:apache-jena-libs:${jenaVersion}") {
            exclude(module: 'slf4j-log4j12')
            exclude(module: 'log4j')
        }
        compile("org.apache.commons:commons-lang3:${commonslangVersion}")
        compile("commons-io:commons-io:${commonsIoVersion}")
        runtime("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
        testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-test:${springVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-aop:${springVersion}")
        testCompile("org.apache.tika:tika-core:1.16")
        testCompile project(":fcrepo-configs")
        testCompile("com.jayway.awaitility:awaitility:${awaitilityVersion}")
        testCompile("org.modeshape:modeshape-jcr-api:${modeshapeVersion}")
        testCompile("javax.jcr:jcr:${jcrVersion}")
        testCompile("org.modeshape:modeshape-jcr:${modeshapeVersion}") {
            exclude(module: 'commons-codec')
            exclude(module: 'snappy-java')
            exclude(module: 'servlet-api')
            exclude(module: 'xercesImpl')
        }
        compileOnly("javax.servlet:javax.servlet-api:${javaxServletapiVersion}")
    }

    jar {
        manifest {
            instruction 'Import-Package', "${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.kernel.modeshape.*;" +
                    "version=${projectOsgiVersion}"
        }
    }

}

project("fcrepo-metrics") {
    apply plugin: "osgi"

    description = 'Fedora Repository Metrics Module'
    dependencies {
        compileOnly("javax.servlet:javax.servlet-api:${javaxServletapiVersion}")
        compile("io.dropwizard.metrics:metrics-core:${metricsVersion}")
        compile("io.dropwizard.metrics:metrics-graphite:${metricsVersion}")
        compile("io.dropwizard.metrics:metrics-jersey2:${metricsVersion}") {
            exclude(module: 'jersey-server')
        }
        compile("io.dropwizard.metrics:metrics-servlets:${metricsVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-beans:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude(module: 'hamcrest-core')
        }
    }

    jar {
        manifest {
            instruction 'Import-Package', "${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.metrics;version=${projectOsgiVersion}"
        }
    }
}

project("fcrepo-webapp") {
    apply plugin: "osgi"

    description = 'Fedora Repository Deployable Web Application'
    dependencies {
        compile project(":fcrepo-kernel-modeshape")
        compile project(":fcrepo-jms")
        compile project(":fcrepo-http-api")
        compile project(":fcrepo-auth-common")
        compile("ch.qos.logback:logback-classic:${logbackVersion}")
        compile("io.dropwizard.metrics:metrics-core:${metricsVersion}")
        compile("io.dropwizard.metrics:metrics-servlets:${metricsVersion}")
        compile("org.apache.aries.blueprint:org.apache.aries.blueprint.web:${blueprintVersion}")
        compile("org.eclipse.jetty:jetty-webapp:${jettyVersion}") {
            exclude(module: 'javax.servlet')
        }
        compile("org.eclipse.jetty:jetty-servlets:${jettyVersion}")
        compile("org.eclipse.jetty:jetty-deploy:${jettyVersion}")
        compile("org.eclipse.jetty:jetty-jmx:${jettyVersion}")
        compile("org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}")
        compile("org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}")
        compile("xml-apis:xml-apis:${xmlapisVersion}")
        compile("com.mchange:c3p0:0.9.5.2")
        compile("mysql:mysql-connector-java:${mysqlVersion}")
        compile("org.postgresql:postgresql:${postgresqlVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-web:${springVersion}")
        compile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:${springVersion}")
        compile("org.apache.httpcomponents:httpclient-osgi:${httpclientVersion}") {
            exclude(module: 'commons-logging')
        }
        compile("org.apache.httpcomponents:httpclient-cache:${httpclientVersion}") {
            exclude(module: 'commons-logging')
        }
        compile("javax.jcr:jcr:2.0")
        runtime("com.amazonaws:aws-java-sdk-s3:${awsClientVersion}") {
            exclude(module: 'aws-java-sdk-core')
            exclude(module: 'commons-logging')
        }
        runtime("com.amazonaws:aws-java-sdk-core:${awsClientVersion}") {
            exclude(module: 'commons-logging')
        }
        runtime("org.modeshape:modeshape-jcr:${modeshapeVersion}") {
            exclude(module: 'commons-codec')
            exclude(module: 'snappy-java')
            exclude(module: 'servlet-api')
            exclude(module: 'xercesImpl')
        }
        testCompile project(":fcrepo-configs")
        testCompile("junit:junit:${junitVersion}")
        testCompile("net.sourceforge.htmlunit:htmlunit:${htmlunitVersion}") {
            exclude(module: 'commons-codec')
            exclude(module: 'commons-logging')
            exclude(module: 'jetty-io')
            exclude(module: 'jetty-http')
            exclude(module: 'jetty-util')
            exclude(module: 'xml-apis')
        }
        testCompile("net.sourceforge.htmlunit:htmlunit-core-js:${htmlunitVersion}")
        testCompile("org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-test:${springVersion}") {
            exclude(module: 'commons-logging')
        }
        testCompile "com.palantir.docker" +
                ".compose:docker-compose-rule-junit4:${dockerComposeRuleJunitVersion}"
        testCompile("org.apache.httpcomponents:httpmime:${httpmimeVersion}") {
            exclude(module: 'commons-logging')
        }
        testCompile project(":fcrepo-http-commons").sourceSets.test.output
        testCompile("org.reflections:reflections:0.9.10")
    }

    configurations {
        libraries
    }

    sourceSets {
        fcrepoConfigs {
            resources.srcDir project(":fcrepo-configs").sourceSets.main.output
        }
    }

    dependencies {
        libraries sourceSets.main.runtimeClasspath
        sourceSets.fcrepoConfigs.runtimeClasspath
    }

    jar {
        exclude('modeshape*')
        from "${projectDir}/src/main/webapp"
        into("WEB-INF/lib") {
            from {
                configurations.libraries
            }
        }
        into("WEB-INF/lib") {
            from {
                sourceSets.fcrepoConfigs.runtimeClasspath
            }
        }

        manifest {
            instruction 'Import-Package', "org.fcrepo.http.commons,org.springframework.web.filter," +
                    "org.springframework.context.config,org.apache.xbean.spring.context.v2;version=${xbeanVersion}," +
                    "org.springframework.beans.factory.xml,org.springframework.scheduling.config," +
                    "org.springframework.scheduling.concurrent,org.fcrepo.kernel.modeshape.spring," +
                    "org.fcrepo.kernel.modeshape.observer," +
                    "org.fcrepo.kernel.modeshape.observer.eventmappings," +
                    "org.fcrepo.kernel.modeshape.identifiers," +
                    "org.glassfish.jersey.servlet,org.fcrepo.jms,org.apache.activemq," +
                    "org.apache.activemq.xbean,com.google.common.eventbus," +
                    "org.springframework.scheduling.annotation,org.modeshape.jcr," +
                    "org.fcrepo.metrics,org.apache.http.impl.conn,org.fcrepo.http.commons.session," +
                    "org.apache.http.annotation,org.apache.activemq.broker.region.policy," +
                    "org.apache.activemq.util,org.apache.activemq.broker.jmx," +
                    "org.apache.activemq.store.kahadb,org.apache.activemq.usage," +
                    "org.apache.activemq.broker,org.apache.activemq.hooks," +
                    "org.fcrepo.auth.common,${defaultOsgiImports}"
            instruction 'Export-Package', "org.fcrepo.webapp;version=${projectOsgiVersion}"
            instruction 'Web-ContextPath', '/fcrepo'
            instruction 'Bundle-ClassPath', "WEB-INF/lib,javax:javaee-api:${javaeeApiVersion}"
        }
    }
}